// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang -std=c++11 -S -O2 -mavx2 -o - %s | FileCheck -check-prefix=CHECK-AVX2 %s
#include "dimsum.h"
using namespace dimsum;

extern "C" {

// CHECK-AVX2-LABEL: operatorADD_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<int8> operatorADD_0(NativeSimd<int8> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<int16> operatorADD_1(NativeSimd<int16> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<int32> operatorADD_2(NativeSimd<int32> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<int64> operatorADD_3(NativeSimd<int64> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint8> operatorADD_4(NativeSimd<uint8> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint16> operatorADD_5(NativeSimd<uint16> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint32> operatorADD_6(NativeSimd<uint32> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint64> operatorADD_7(NativeSimd<uint64> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<float> operatorADD_8(NativeSimd<float> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorADD_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    retq
NativeSimd<double> operatorADD_9(NativeSimd<double> a) {
  return operator+(a);
}

// CHECK-AVX2-LABEL: operatorSUB_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubb %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int8> operatorSUB_0(NativeSimd<int8> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubw %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int16> operatorSUB_1(NativeSimd<int16> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubd %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int32> operatorSUB_2(NativeSimd<int32> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubq %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int64> operatorSUB_3(NativeSimd<int64> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubb %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint8> operatorSUB_4(NativeSimd<uint8> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubw %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint16> operatorSUB_5(NativeSimd<uint16> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubd %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint32> operatorSUB_6(NativeSimd<uint32> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsubq %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint64> operatorSUB_7(NativeSimd<uint64> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vbroadcastss {{.*#+}} ymm1 = [-0,-0,-0,-0,-0,-0,-0,-0]
// CHECK-AVX2-NEXT:    vxorps %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<float> operatorSUB_8(NativeSimd<float> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorSUB_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [-0,-0,-0,-0]
// CHECK-AVX2-NEXT:    vxorps %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<double> operatorSUB_9(NativeSimd<double> a) {
  return operator-(a);
}

// CHECK-AVX2-LABEL: operatorNOT_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int8> operatorNOT_0(NativeSimd<int8> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int16> operatorNOT_1(NativeSimd<int16> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int32> operatorNOT_2(NativeSimd<int32> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<int64> operatorNOT_3(NativeSimd<int64> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint8> operatorNOT_4(NativeSimd<uint8> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint16> operatorNOT_5(NativeSimd<uint16> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint32> operatorNOT_6(NativeSimd<uint32> a) {
  return operator~(a);
}

// CHECK-AVX2-LABEL: operatorNOT_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %ymm1, %ymm1, %ymm1
// CHECK-AVX2-NEXT:    vpxor %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    retq
NativeSimd<uint64> operatorNOT_7(NativeSimd<uint64> a) {
  return operator~(a);
}

}
