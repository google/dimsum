// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang -std=c++11 -S -O2 -msse4.2 -o - %s | FileCheck -check-prefix=CHECK-SSE42 %s
// RUN: %clang -std=c++11 -S -O2 -mavx2 -o - %s | FileCheck -check-prefix=CHECK-AVX2 %s
#include "dimsum.h"
using namespace dimsum;

extern "C" {

// CHECK-SSE42-LABEL: cmp_eq_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_eq_0(Simd128<int8> a, Simd128<int8> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_eq_1(Simd128<int16> a, Simd128<int16> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_eq_2(Simd128<int32> a, Simd128<int32> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_eq_3(Simd128<int64> a, Simd128<int64> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_eq_4(Simd128<uint8> a, Simd128<uint8> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_eq_5(Simd128<uint16> a, Simd128<uint16> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_eq_6(Simd128<uint32> a, Simd128<uint32> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_eq_7(Simd128<uint64> a, Simd128<uint64> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpeqps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpeqps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_eq_8(Simd128<float> a, Simd128<float> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_eq_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpeqpd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_eq_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpeqpd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_eq_9(Simd128<double> a, Simd128<double> b) {
  return cmp_eq(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_ne_0(Simd128<int8> a, Simd128<int8> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_ne_1(Simd128<int16> a, Simd128<int16> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_ne_2(Simd128<int32> a, Simd128<int32> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_ne_3(Simd128<int64> a, Simd128<int64> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_ne_4(Simd128<uint8> a, Simd128<uint8> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_ne_5(Simd128<uint16> a, Simd128<uint16> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_ne_6(Simd128<uint32> a, Simd128<uint32> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpeqq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpeqq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_ne_7(Simd128<uint64> a, Simd128<uint64> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpneqps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpneqps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_ne_8(Simd128<float> a, Simd128<float> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_ne_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpneqpd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ne_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpneqpd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_ne_9(Simd128<double> a, Simd128<double> b) {
  return cmp_ne(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtb %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_lt_0(Simd128<int8> a, Simd128<int8> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_lt_1(Simd128<int16> a, Simd128<int16> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_lt_2(Simd128<int32> a, Simd128<int32> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_lt_3(Simd128<int64> a, Simd128<int64> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pcmpgtb %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpcmpgtb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_lt_4(Simd128<uint8> a, Simd128<uint8> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [32768,32768,32768,32768,32768,32768,32768,32768]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pcmpgtw %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [32768,32768,32768,32768,32768,32768,32768,32768]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpcmpgtw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_lt_5(Simd128<uint16> a, Simd128<uint16> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [2147483648,2147483648,2147483648,2147483648]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pcmpgtd %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpbroadcastd {{.*#+}} xmm2 = [2147483648,2147483648,2147483648,2147483648]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpcmpgtd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_lt_6(Simd128<uint32> a, Simd128<uint32> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pcmpgtq %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_lt_7(Simd128<uint64> a, Simd128<uint64> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpltps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpltps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_lt_8(Simd128<float> a, Simd128<float> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_lt_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpltpd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_lt_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpltpd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_lt_9(Simd128<double> a, Simd128<double> b) {
  return cmp_lt(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_le_0(Simd128<int8> a, Simd128<int8> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_le_1(Simd128<int16> a, Simd128<int16> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_le_2(Simd128<int32> a, Simd128<int32> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_le_3(Simd128<int64> a, Simd128<int64> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pminub %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpminub %xmm1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpcmpeqb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_le_4(Simd128<uint8> a, Simd128<uint8> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pminuw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpminuw %xmm1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpcmpeqw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_le_5(Simd128<uint16> a, Simd128<uint16> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pminud %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpminud %xmm1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_le_6(Simd128<uint32> a, Simd128<uint32> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pcmpgtq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_le_7(Simd128<uint64> a, Simd128<uint64> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpleps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpleps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_le_8(Simd128<float> a, Simd128<float> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_le_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmplepd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_le_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmplepd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_le_9(Simd128<double> a, Simd128<double> b) {
  return cmp_le(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_gt_0(Simd128<int8> a, Simd128<int8> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_gt_1(Simd128<int16> a, Simd128<int16> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_gt_2(Simd128<int32> a, Simd128<int32> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_gt_3(Simd128<int64> a, Simd128<int64> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pcmpgtb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpgtb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_gt_4(Simd128<uint8> a, Simd128<uint8> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [32768,32768,32768,32768,32768,32768,32768,32768]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pcmpgtw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [32768,32768,32768,32768,32768,32768,32768,32768]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpgtw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_gt_5(Simd128<uint16> a, Simd128<uint16> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [2147483648,2147483648,2147483648,2147483648]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pcmpgtd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpbroadcastd {{.*#+}} xmm2 = [2147483648,2147483648,2147483648,2147483648]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpgtd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_gt_6(Simd128<uint32> a, Simd128<uint32> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm1
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pcmpgtq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_gt_7(Simd128<uint64> a, Simd128<uint64> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpltps %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movaps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpltps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_gt_8(Simd128<float> a, Simd128<float> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_gt_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpltpd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movapd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_gt_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpltpd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_gt_9(Simd128<double> a, Simd128<double> b) {
  return cmp_gt(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtb %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqd %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_ge_0(Simd128<int8> a, Simd128<int8> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqd %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_ge_1(Simd128<int16> a, Simd128<int16> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqd %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_ge_2(Simd128<int32> a, Simd128<int32> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pcmpgtq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqd %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_ge_3(Simd128<int64> a, Simd128<int64> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmaxub %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmaxub %xmm1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpcmpeqb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> cmp_ge_4(Simd128<uint8> a, Simd128<uint8> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmaxuw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmaxuw %xmm1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpcmpeqw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> cmp_ge_5(Simd128<uint16> a, Simd128<uint16> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmaxud %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pcmpeqd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmaxud %xmm1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_ge_6(Simd128<uint32> a, Simd128<uint32> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pcmpgtq %xmm0, %xmm2
// CHECK-SSE42-NEXT:    pcmpeqd %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpcmpgtq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpcmpeqd %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpxor %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_ge_7(Simd128<uint64> a, Simd128<uint64> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmpleps %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movaps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmpleps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> cmp_ge_8(Simd128<float> a, Simd128<float> b) {
  return cmp_ge(a, b);
}

// CHECK-SSE42-LABEL: cmp_ge_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    cmplepd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movapd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: cmp_ge_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vcmplepd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> cmp_ge_9(Simd128<double> a, Simd128<double> b) {
  return cmp_ge(a, b);
}

}
