// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang -std=c++11 -S -O2 -msse4.2 -o - %s | FileCheck -check-prefix=CHECK-SSE42 %s
// RUN: %clang -std=c++11 -S -O2 -mavx2 -o - %s | FileCheck -check-prefix=CHECK-AVX2 %s
#include "dimsum.h"
using namespace dimsum;

extern "C" {

// CHECK-SSE42-LABEL: operatorADDEQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddb (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddb (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddw (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddw (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddd (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddd (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddq (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddq (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddb (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddb (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddw (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddw (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddd (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddd (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddq (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddq (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    addps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vaddps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_8(Simd128<float>& a, Simd128<float> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorADDEQ_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    addpd (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movapd %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADDEQ_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vaddpd (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovapd %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorADDEQ_9(Simd128<double>& a, Simd128<double> b) {
  a += b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubb %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubb %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    psubq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsubq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm1
// CHECK-SSE42-NEXT:    subps %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movaps %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vsubps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_8(Simd128<float>& a, Simd128<float> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorSUBEQ_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movapd (%rdi), %xmm1
// CHECK-SSE42-NEXT:    subpd %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movapd %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUBEQ_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovapd (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vsubpd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovapd %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSUBEQ_9(Simd128<double>& a, Simd128<double> b) {
  a -= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm2
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm3
// CHECK-SSE42-NEXT:    pmullw %xmm2, %xmm3
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [255,255,255,255,255,255,255,255]
// CHECK-SSE42-NEXT:    pand %xmm2, %xmm3
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pmullw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pand %xmm2, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm1, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovsxbw %xmm0, %ymm0
// CHECK-AVX2-NEXT:    vpmovsxbw (%rdi), %ymm1
// CHECK-AVX2-NEXT:    vpmullw %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmullw (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmullw (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmulld (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmulld (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    pmuludq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psrlq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm0, %xmm3
// CHECK-SSE42-NEXT:    paddq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    paddq %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm2, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpaddq %xmm3, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpsllq $32, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpaddq %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm2
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm3
// CHECK-SSE42-NEXT:    pmullw %xmm2, %xmm3
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [255,255,255,255,255,255,255,255]
// CHECK-SSE42-NEXT:    pand %xmm2, %xmm3
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pmullw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pand %xmm2, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm1, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovsxbw %xmm0, %ymm0
// CHECK-AVX2-NEXT:    vpmovsxbw (%rdi), %ymm1
// CHECK-AVX2-NEXT:    vpmullw %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmullw (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmullw (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmulld (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmulld (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    pmuludq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psrlq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm0, %xmm3
// CHECK-SSE42-NEXT:    paddq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    paddq %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm2, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpaddq %xmm3, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpsllq $32, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpaddq %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    mulps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmulps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_8(Simd128<float>& a, Simd128<float> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorMULEQ_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    mulpd (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movapd %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMULEQ_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmulpd (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovapd %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorMULEQ_9(Simd128<double>& a, Simd128<double> b) {
  a *= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psllw $4, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    psllw $5, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psllw $2, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm2, %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsllw $4, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $2, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    psllw $12, %xmm1
// CHECK-SSE42-NEXT:    psllw $4, %xmm0
// CHECK-SSE42-NEXT:    por %xmm1, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $8, %xmm3
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $4, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $2, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
// CHECK-AVX2-NEXT:    vpsllvd %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
// CHECK-AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pslld $23, %xmm0
// CHECK-SSE42-NEXT:    paddd {{.*}}(%rip), %xmm0
// CHECK-SSE42-NEXT:    cvttps2dq %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pmulld (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllvd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psllq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllvq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psllw $4, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    psllw $5, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psllw $2, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm2, %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsllw $4, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $2, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    psllw $12, %xmm1
// CHECK-SSE42-NEXT:    psllw $4, %xmm0
// CHECK-SSE42-NEXT:    por %xmm1, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $8, %xmm3
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $4, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $2, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
// CHECK-AVX2-NEXT:    vpsllvd %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
// CHECK-AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pslld $23, %xmm0
// CHECK-SSE42-NEXT:    paddd {{.*}}(%rip), %xmm0
// CHECK-SSE42-NEXT:    cvttps2dq %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pmulld (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllvd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHLEQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psllq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHLEQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllvq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHLEQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a <<= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm1
// CHECK-SSE42-NEXT:    punpckhbw {{.*#+}} xmm0 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
// CHECK-SSE42-NEXT:    punpckhbw {{.*#+}} xmm2 = xmm2[8],xmm3[8],xmm2[9],xmm3[9],xmm2[10],xmm3[10],xmm2[11],xmm3[11],xmm2[12],xmm3[12],xmm2[13],xmm3[13],xmm2[14],xmm3[14],xmm2[15],xmm3[15]
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $4, %xmm4
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $2, %xmm4
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $1, %xmm4
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
// CHECK-SSE42-NEXT:    punpcklbw {{.*#+}} xmm1 = xmm1[0],xmm3[0],xmm1[1],xmm3[1],xmm1[2],xmm3[2],xmm1[3],xmm3[3],xmm1[4],xmm3[4],xmm1[5],xmm3[5],xmm1[6],xmm3[6],xmm1[7],xmm3[7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psraw $4, %xmm3
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    psrlw $8, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psraw $2, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psraw $1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    psrlw $8, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpunpckhbw {{.*#+}} xmm2 = xmm0[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]
// CHECK-AVX2-NEXT:    vpunpckhbw {{.*#+}} xmm3 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
// CHECK-AVX2-NEXT:    vpsraw $4, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpsraw $2, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpaddw %xmm2, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpsraw $1, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpaddw %xmm2, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpsrlw $8, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpunpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
// CHECK-AVX2-NEXT:    vpunpcklbw {{.*#+}} xmm1 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
// CHECK-AVX2-NEXT:    vpsraw $4, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm3, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsraw $2, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpaddw %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm3, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsraw $1, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpaddw %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm3, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $8, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpackuswb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    psllw $12, %xmm1
// CHECK-SSE42-NEXT:    psllw $4, %xmm0
// CHECK-SSE42-NEXT:    por %xmm1, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psraw $8, %xmm3
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psraw $4, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psraw $2, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psraw $1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpmovsxwd (%rdi), %ymm1
// CHECK-AVX2-NEXT:    vpsravd %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
// CHECK-AVX2-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrldq {{.*#+}} xmm2 = xmm2[12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psrad %xmm2, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm4
// CHECK-SSE42-NEXT:    psrad %xmm2, %xmm4
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pmovzxdq {{.*#+}} xmm3 = xmm0[0],zero,xmm0[1],zero
// CHECK-SSE42-NEXT:    punpckhdq {{.*#+}} xmm0 = xmm0[2],xmm2[2],xmm0[3],xmm2[3]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrad %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrad %xmm3, %xmm1
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1,2,3],xmm2[4,5,6,7]
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1],xmm4[2,3],xmm1[4,5],xmm4[6,7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsravd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm4 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    psrlq %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm5
// CHECK-SSE42-NEXT:    psrlq %xmm4, %xmm5
// CHECK-SSE42-NEXT:    psrlq %xmm0, %xmm3
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm2 = xmm3[0,1,2,3],xmm2[4,5,6,7]
// CHECK-SSE42-NEXT:    psrlq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1,2,3],xmm5[4,5,6,7]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psubq %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm1 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpsrlvq %xmm0, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpxor (%rdi), %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsrlvq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpsubq %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlw $4, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    psllw $5, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlw $2, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlw $1, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $4, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsrlw $2, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsrlw $1, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpblendvb %xmm0, %xmm2, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    psllw $12, %xmm1
// CHECK-SSE42-NEXT:    psllw $4, %xmm0
// CHECK-SSE42-NEXT:    por %xmm1, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $8, %xmm3
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $4, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $2, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
// CHECK-AVX2-NEXT:    vpsrlvd %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
// CHECK-AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrldq {{.*#+}} xmm2 = xmm2[12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psrld %xmm2, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm4
// CHECK-SSE42-NEXT:    psrld %xmm2, %xmm4
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pmovzxdq {{.*#+}} xmm3 = xmm0[0],zero,xmm0[1],zero
// CHECK-SSE42-NEXT:    punpckhdq {{.*#+}} xmm0 = xmm0[2],xmm2[2],xmm0[3],xmm2[3]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrld %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrld %xmm3, %xmm1
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1,2,3],xmm2[4,5,6,7]
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1],xmm4[2,3],xmm1[4,5],xmm4[6,7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsrlvd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorSHREQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa (%rdi), %xmm1
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psrlq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlq %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm1 = xmm1[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHREQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa (%rdi), %xmm1
// CHECK-AVX2-NEXT:    vpsrlvq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vmovdqa %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorSHREQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a >>= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorANDEQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorANDEQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorANDEQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a &= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorXOREQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOREQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorXOREQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a ^= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_0(Simd128<int8>& a, Simd128<int8> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_1(Simd128<int16>& a, Simd128<int16> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_2(Simd128<int32>& a, Simd128<int32> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_3(Simd128<int64>& a, Simd128<int64> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_4(Simd128<uint8>& a, Simd128<uint8> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_5(Simd128<uint16>& a, Simd128<uint16> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_6(Simd128<uint32>& a, Simd128<uint32> b) {
  a |= b;
}

// CHECK-SSE42-LABEL: operatorOREQ_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOREQ_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps (%rdi), %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void operatorOREQ_7(Simd128<uint64>& a, Simd128<uint64> b) {
  a |= b;
}

}
