// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang -std=c++11 -S -O2 -msse4.2 -o - %s | FileCheck -check-prefix=CHECK-SSE42 %s
// RUN: %clang -std=c++11 -S -O2 -mavx2 -o - %s | FileCheck -check-prefix=CHECK-AVX2 %s
#include "dimsum.h"
using namespace dimsum;

extern "C" {

// CHECK-SSE42-LABEL: copy_from_element_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> copy_from_element_0(int8* a) {
  Simd128<int8> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> copy_from_element_1(int16* a) {
  Simd128<int16> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> copy_from_element_2(int32* a) {
  Simd128<int32> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> copy_from_element_3(int64* a) {
  Simd128<int64> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> copy_from_element_4(uint8* a) {
  Simd128<uint8> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> copy_from_element_5(uint16* a) {
  Simd128<uint16> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> copy_from_element_6(uint32* a) {
  Simd128<uint32> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> copy_from_element_7(uint64* a) {
  Simd128<uint64> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<float> copy_from_element_8(float* a) {
  Simd128<float> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_element_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_element_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<double> copy_from_element_9(double* a) {
  Simd128<double> r;
  r.copy_from(a, flags::element_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> copy_from_vector_0(int8* a) {
  Simd128<int8> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> copy_from_vector_1(int16* a) {
  Simd128<int16> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> copy_from_vector_2(int32* a) {
  Simd128<int32> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> copy_from_vector_3(int64* a) {
  Simd128<int64> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> copy_from_vector_4(uint8* a) {
  Simd128<uint8> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> copy_from_vector_5(uint16* a) {
  Simd128<uint16> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> copy_from_vector_6(uint32* a) {
  Simd128<uint32> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> copy_from_vector_7(uint64* a) {
  Simd128<uint64> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<float> copy_from_vector_8(float* a) {
  Simd128<float> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_from_vector_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps (%rdi), %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_from_vector_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps (%rdi), %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<double> copy_from_vector_9(double* a) {
  Simd128<double> r;
  r.copy_from(a, flags::vector_aligned);
  return r;
}

// CHECK-SSE42-LABEL: copy_to_element_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_0(Simd128<int8> a, int8* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_1(Simd128<int16> a, int16* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_2(Simd128<int32> a, int32* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_3(Simd128<int64> a, int64* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_4(Simd128<uint8> a, uint8* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_5(Simd128<uint16> a, uint16* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_6(Simd128<uint32> a, uint32* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_7(Simd128<uint64> a, uint64* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_8(Simd128<float> a, float* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_element_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movups %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_element_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovups %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_element_9(Simd128<double> a, double* b) {
  a.copy_to(b, flags::element_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_0(Simd128<int8> a, int8* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_1(Simd128<int16> a, int16* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_2(Simd128<int32> a, int32* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_3(Simd128<int64> a, int64* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_4(Simd128<uint8> a, uint8* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_5(Simd128<uint16> a, uint16* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_6(Simd128<uint32> a, uint32* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_7(Simd128<uint64> a, uint64* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_8(Simd128<float> a, float* b) {
  a.copy_to(b, flags::vector_aligned);
}

// CHECK-SSE42-LABEL: copy_to_vector_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movaps %xmm0, (%rdi)
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: copy_to_vector_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovaps %xmm0, (%rdi)
// CHECK-AVX2-NEXT:    retq
void copy_to_vector_9(Simd128<double> a, double* b) {
  a.copy_to(b, flags::vector_aligned);
}

}
