// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang -std=c++11 -S -O2 -msse4.2 -o - %s | FileCheck -check-prefix=CHECK-SSE42 %s
// RUN: %clang -std=c++11 -S -O2 -mavx2 -o - %s | FileCheck -check-prefix=CHECK-AVX2 %s
#include "dimsum.h"
using namespace dimsum;

extern "C" {

// CHECK-SSE42-LABEL: operatorADD_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorADD_0(Simd128<int8> a, Simd128<int8> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorADD_1(Simd128<int16> a, Simd128<int16> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorADD_2(Simd128<int32> a, Simd128<int32> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorADD_3(Simd128<int64> a, Simd128<int64> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorADD_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorADD_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddd %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorADD_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    paddq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpaddq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorADD_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    addps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vaddps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<float> operatorADD_8(Simd128<float> a, Simd128<float> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorADD_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    addpd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorADD_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vaddpd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<double> operatorADD_9(Simd128<double> a, Simd128<double> b) {
  return operator+(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorSUB_0(Simd128<int8> a, Simd128<int8> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorSUB_1(Simd128<int16> a, Simd128<int16> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorSUB_2(Simd128<int32> a, Simd128<int32> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorSUB_3(Simd128<int64> a, Simd128<int64> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubb %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubb %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorSUB_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorSUB_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorSUB_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    psubq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsubq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorSUB_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    subps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vsubps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<float> operatorSUB_8(Simd128<float> a, Simd128<float> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorSUB_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    subpd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSUB_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vsubpd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<double> operatorSUB_9(Simd128<double> a, Simd128<double> b) {
  return operator-(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm3
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pmullw %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm3 = [255,255,255,255,255,255,255,255]
// CHECK-SSE42-NEXT:    pand %xmm3, %xmm2
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pmullw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pand %xmm3, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovsxbw %xmm0, %ymm0
// CHECK-AVX2-NEXT:    vpmovsxbw %xmm1, %ymm1
// CHECK-AVX2-NEXT:    vpmullw %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorMUL_0(Simd128<int8> a, Simd128<int8> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmullw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmullw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorMUL_1(Simd128<int16> a, Simd128<int16> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmulld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmulld %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorMUL_2(Simd128<int32> a, Simd128<int32> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    pmuludq %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm3
// CHECK-SSE42-NEXT:    psrlq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    paddq %xmm3, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpmuludq %xmm3, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpaddq %xmm2, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpsllq $32, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpaddq %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorMUL_3(Simd128<int64> a, Simd128<int64> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm3
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pmullw %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm3 = [255,255,255,255,255,255,255,255]
// CHECK-SSE42-NEXT:    pand %xmm3, %xmm2
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    pmovsxbw %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pmullw %xmm0, %xmm1
// CHECK-SSE42-NEXT:    pand %xmm3, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovsxbw %xmm0, %ymm0
// CHECK-AVX2-NEXT:    vpmovsxbw %xmm1, %ymm1
// CHECK-AVX2-NEXT:    vpmullw %ymm0, %ymm1, %ymm0
// CHECK-AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpshufb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorMUL_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmullw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmullw %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorMUL_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pmulld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmulld %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorMUL_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    pmuludq %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm3
// CHECK-SSE42-NEXT:    psrlq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddq %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllq $32, %xmm3
// CHECK-SSE42-NEXT:    pmuludq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    paddq %xmm3, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm1, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpsrlq $32, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpmuludq %xmm3, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpaddq %xmm2, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpsllq $32, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpmuludq %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    vpaddq %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorMUL_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    mulps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmulps %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<float> operatorMUL_8(Simd128<float> a, Simd128<float> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorMUL_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    mulpd %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorMUL_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmulpd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<double> operatorMUL_9(Simd128<double> a, Simd128<double> b) {
  return operator*(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorAND_0(Simd128<int8> a, Simd128<int8> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorAND_1(Simd128<int16> a, Simd128<int16> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorAND_2(Simd128<int32> a, Simd128<int32> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorAND_3(Simd128<int64> a, Simd128<int64> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorAND_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorAND_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorAND_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorAND_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    andps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorAND_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vandps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorAND_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator&(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorXOR_0(Simd128<int8> a, Simd128<int8> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorXOR_1(Simd128<int16> a, Simd128<int16> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorXOR_2(Simd128<int32> a, Simd128<int32> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorXOR_3(Simd128<int64> a, Simd128<int64> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorXOR_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorXOR_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorXOR_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorXOR_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    xorps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorXOR_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vxorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorXOR_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator^(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorOR_0(Simd128<int8> a, Simd128<int8> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorOR_1(Simd128<int16> a, Simd128<int16> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorOR_2(Simd128<int32> a, Simd128<int32> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorOR_3(Simd128<int64> a, Simd128<int64> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorOR_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorOR_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorOR_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorOR_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    orps %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorOR_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vorps %xmm0, %xmm1, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorOR_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator|(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $4, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $2, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm3, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $4, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsllw $2, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorSHL_0(Simd128<int8> a, Simd128<int8> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    psllw $12, %xmm0
// CHECK-SSE42-NEXT:    psllw $4, %xmm1
// CHECK-SSE42-NEXT:    por %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psllw $8, %xmm4
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psllw $4, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psllw $2, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psllw $1, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpsllvd %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
// CHECK-AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
// CHECK-AVX2-NEXT:    # kill: def %xmm0 killed %xmm0 killed %ymm0
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorSHL_1(Simd128<int16> a, Simd128<int16> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pslld $23, %xmm1
// CHECK-SSE42-NEXT:    paddd {{.*}}(%rip), %xmm1
// CHECK-SSE42-NEXT:    cvttps2dq %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pmulld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllvd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorSHL_2(Simd128<int32> a, Simd128<int32> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psllq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    psllq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm2[0,1,2,3],xmm0[4,5,6,7]
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllvq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorSHL_3(Simd128<int64> a, Simd128<int64> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $4, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psllw $2, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm3, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $4, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsllw $2, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorSHL_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    psllw $12, %xmm0
// CHECK-SSE42-NEXT:    psllw $4, %xmm1
// CHECK-SSE42-NEXT:    por %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psllw $8, %xmm4
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psllw $4, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psllw $2, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psllw $1, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpsllvd %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
// CHECK-AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
// CHECK-AVX2-NEXT:    # kill: def %xmm0 killed %xmm0 killed %ymm0
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorSHL_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    pslld $23, %xmm1
// CHECK-SSE42-NEXT:    paddd {{.*}}(%rip), %xmm1
// CHECK-SSE42-NEXT:    cvttps2dq %xmm1, %xmm1
// CHECK-SSE42-NEXT:    pmulld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllvd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorSHL_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psllq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    psllq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm2[0,1,2,3],xmm0[4,5,6,7]
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllvq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorSHL_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_0:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psllw $5, %xmm1
// CHECK-SSE42-NEXT:    punpckhbw {{.*#+}} xmm0 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
// CHECK-SSE42-NEXT:    punpckhbw {{.*#+}} xmm3 = xmm3[8],xmm2[8],xmm3[9],xmm2[9],xmm3[10],xmm2[10],xmm3[11],xmm2[11],xmm3[12],xmm2[12],xmm3[13],xmm2[13],xmm3[14],xmm2[14],xmm3[15],xmm2[15]
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm4
// CHECK-SSE42-NEXT:    psraw $4, %xmm4
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm4
// CHECK-SSE42-NEXT:    psraw $2, %xmm4
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm4
// CHECK-SSE42-NEXT:    psraw $1, %xmm4
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm3
// CHECK-SSE42-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
// CHECK-SSE42-NEXT:    punpcklbw {{.*#+}} xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3],xmm1[4],xmm2[4],xmm1[5],xmm2[5],xmm1[6],xmm2[6],xmm1[7],xmm2[7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psraw $4, %xmm2
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psraw $2, %xmm2
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psraw $1, %xmm2
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psrlw $8, %xmm3
// CHECK-SSE42-NEXT:    psrlw $8, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_0:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpunpckhbw {{.*#+}} xmm2 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
// CHECK-AVX2-NEXT:    vpunpckhbw {{.*#+}} xmm3 = xmm0[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]
// CHECK-AVX2-NEXT:    vpsraw $4, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpsraw $2, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpaddw %xmm2, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpsraw $1, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpaddw %xmm2, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpsrlw $8, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpunpcklbw {{.*#+}} xmm1 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
// CHECK-AVX2-NEXT:    vpunpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
// CHECK-AVX2-NEXT:    vpsraw $4, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsraw $2, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpaddw %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsraw $1, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpaddw %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $8, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpackuswb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorSHR_0(Simd128<int8> a, Simd128<int8> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_1:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    psllw $12, %xmm0
// CHECK-SSE42-NEXT:    psllw $4, %xmm1
// CHECK-SSE42-NEXT:    por %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $8, %xmm4
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psraw $4, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psraw $2, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psraw $1, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_1:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
// CHECK-AVX2-NEXT:    vpmovsxwd %xmm0, %ymm0
// CHECK-AVX2-NEXT:    vpsravd %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    vextracti128 $1, %ymm0, %xmm1
// CHECK-AVX2-NEXT:    vpackssdw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorSHR_1(Simd128<int16> a, Simd128<int16> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_2:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrldq {{.*#+}} xmm2 = xmm2[12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm3
// CHECK-SSE42-NEXT:    psrad %xmm2, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm4
// CHECK-SSE42-NEXT:    psrad %xmm2, %xmm4
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pmovzxdq {{.*#+}} xmm3 = xmm1[0],zero,xmm1[1],zero
// CHECK-SSE42-NEXT:    punpckhdq {{.*#+}} xmm1 = xmm1[2],xmm2[2],xmm1[3],xmm2[3]
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrad %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrad %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm0[0,1,2,3],xmm2[4,5,6,7]
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm0[0,1],xmm4[2,3],xmm0[4,5],xmm4[6,7]
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_2:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsravd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorSHR_2(Simd128<int32> a, Simd128<int32> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_3:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm4
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm4
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm2 = xmm3[0,1,2,3],xmm2[4,5,6,7]
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm4[0,1,2,3],xmm0[4,5,6,7]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    psubq %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_3:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpsrlvq %xmm1, %xmm2, %xmm3
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlvq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsubq %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorSHR_3(Simd128<int64> a, Simd128<int64> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_4:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $4, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $2, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm3
// CHECK-SSE42-NEXT:    psrlw $1, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm1, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_4:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsrlw $4, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $2, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $1, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorSHR_4(Simd128<uint8> a, Simd128<uint8> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_5:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    psllw $12, %xmm0
// CHECK-SSE42-NEXT:    psllw $4, %xmm1
// CHECK-SSE42-NEXT:    por %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psrlw $8, %xmm4
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psrlw $4, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psrlw $2, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm1
// CHECK-SSE42-NEXT:    psrlw $1, %xmm1
// CHECK-SSE42-NEXT:    paddw %xmm3, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm1, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_5:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
// CHECK-AVX2-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
// CHECK-AVX2-NEXT:    vpsrlvd %ymm1, %ymm0, %ymm0
// CHECK-AVX2-NEXT:    vpshufb {{.*#+}} ymm0 = ymm0[0,1,4,5,8,9,12,13,8,9,12,13,12,13,14,15,16,17,20,21,24,25,28,29,24,25,28,29,28,29,30,31]
// CHECK-AVX2-NEXT:    vpermq {{.*#+}} ymm0 = ymm0[0,2,2,3]
// CHECK-AVX2-NEXT:    # kill: def %xmm0 killed %xmm0 killed %ymm0
// CHECK-AVX2-NEXT:    vzeroupper
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorSHR_5(Simd128<uint16> a, Simd128<uint16> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_6:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrldq {{.*#+}} xmm2 = xmm2[12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm3
// CHECK-SSE42-NEXT:    psrld %xmm2, %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlq $32, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm4
// CHECK-SSE42-NEXT:    psrld %xmm2, %xmm4
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm4 = xmm4[0,1,2,3],xmm3[4,5,6,7]
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pmovzxdq {{.*#+}} xmm3 = xmm1[0],zero,xmm1[1],zero
// CHECK-SSE42-NEXT:    punpckhdq {{.*#+}} xmm1 = xmm1[2],xmm2[2],xmm1[3],xmm2[3]
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrld %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrld %xmm3, %xmm0
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm0[0,1,2,3],xmm2[4,5,6,7]
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm0[0,1],xmm4[2,3],xmm0[4,5],xmm4[6,7]
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_6:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsrlvd %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorSHR_6(Simd128<uint32> a, Simd128<uint32> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_7:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,0,1]
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pblendw {{.*#+}} xmm0 = xmm2[0,1,2,3],xmm0[4,5,6,7]
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_7:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vpsrlvq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorSHR_7(Simd128<uint64> a, Simd128<uint64> b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movd %edi, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pshufb %xmm2, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psllw $4, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    paddb %xmm2, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psllw $2, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm3, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm2, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpbroadcastb %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $4, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsllw $2, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm3, %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpaddb %xmm3, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorSHL_8(Simd128<int8> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    pmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-SSE42-NEXT:    psllw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-AVX2-NEXT:    vpsllw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorSHL_9(Simd128<int16> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_10:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    pslld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_10:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpslld %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorSHL_10(Simd128<int32> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_11:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movslq %edi, %rax
// CHECK-SSE42-NEXT:    movq %rax, %xmm1
// CHECK-SSE42-NEXT:    psllq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_11:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    movslq %edi, %rax
// CHECK-AVX2-NEXT:    vmovq %rax, %xmm1
// CHECK-AVX2-NEXT:    vpsllq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorSHL_11(Simd128<int64> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_12:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movd %edi, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pshufb %xmm2, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psllw $4, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm2
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    paddb %xmm2, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psllw $2, %xmm3
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm3
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm3, %xmm3
// CHECK-SSE42-NEXT:    paddb %xmm2, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_12:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpbroadcastb %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $4, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsllw $2, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm3, %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpaddb %xmm0, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpaddb %xmm3, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorSHL_12(Simd128<uint8> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_13:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    pmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-SSE42-NEXT:    psllw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_13:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-AVX2-NEXT:    vpsllw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorSHL_13(Simd128<uint16> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_14:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    pslld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_14:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpslld %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorSHL_14(Simd128<uint32> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHL_15:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movslq %edi, %rax
// CHECK-SSE42-NEXT:    movq %rax, %xmm1
// CHECK-SSE42-NEXT:    psllq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHL_15:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    movslq %edi, %rax
// CHECK-AVX2-NEXT:    vmovq %rax, %xmm1
// CHECK-AVX2-NEXT:    vpsllq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorSHL_15(Simd128<uint64> a, int b) {
  return operator<<(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_8:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movd %edi, %xmm3
// CHECK-SSE42-NEXT:    pxor %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pshufb %xmm0, %xmm3
// CHECK-SSE42-NEXT:    psllw $5, %xmm3
// CHECK-SSE42-NEXT:    punpckhbw {{.*#+}} xmm0 = xmm0[8],xmm3[8],xmm0[9],xmm3[9],xmm0[10],xmm3[10],xmm0[11],xmm3[11],xmm0[12],xmm3[12],xmm0[13],xmm3[13],xmm0[14],xmm3[14],xmm0[15],xmm3[15]
// CHECK-SSE42-NEXT:    punpckhbw {{.*#+}} xmm2 = xmm2[8],xmm1[8],xmm2[9],xmm1[9],xmm2[10],xmm1[10],xmm2[11],xmm1[11],xmm2[12],xmm1[12],xmm2[13],xmm1[13],xmm2[14],xmm1[14],xmm2[15],xmm1[15]
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $4, %xmm4
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $2, %xmm4
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    movdqa %xmm2, %xmm4
// CHECK-SSE42-NEXT:    psraw $1, %xmm4
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm4, %xmm2
// CHECK-SSE42-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3],xmm0[4],xmm3[4],xmm0[5],xmm3[5],xmm0[6],xmm3[6],xmm0[7],xmm3[7]
// CHECK-SSE42-NEXT:    punpcklbw {{.*#+}} xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psraw $4, %xmm3
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psraw $2, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm3
// CHECK-SSE42-NEXT:    psraw $1, %xmm3
// CHECK-SSE42-NEXT:    paddw %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm3, %xmm1
// CHECK-SSE42-NEXT:    psrlw $8, %xmm2
// CHECK-SSE42-NEXT:    psrlw $8, %xmm1
// CHECK-SSE42-NEXT:    packuswb %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_8:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpbroadcastb %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpunpckhbw {{.*#+}} xmm2 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
// CHECK-AVX2-NEXT:    vpunpckhbw {{.*#+}} xmm3 = xmm0[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]
// CHECK-AVX2-NEXT:    vpsraw $4, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpsraw $2, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpaddw %xmm2, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm3
// CHECK-AVX2-NEXT:    vpsraw $1, %xmm3, %xmm4
// CHECK-AVX2-NEXT:    vpaddw %xmm2, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm4, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpsrlw $8, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpunpcklbw {{.*#+}} xmm1 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
// CHECK-AVX2-NEXT:    vpunpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
// CHECK-AVX2-NEXT:    vpsraw $4, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsraw $2, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpaddw %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsraw $1, %xmm0, %xmm3
// CHECK-AVX2-NEXT:    vpaddw %xmm1, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm3, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $8, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpackuswb %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int8> operatorSHR_8(Simd128<int8> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_9:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    pmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-SSE42-NEXT:    psraw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_9:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-AVX2-NEXT:    vpsraw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int16> operatorSHR_9(Simd128<int16> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_10:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    psrad %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_10:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpsrad %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int32> operatorSHR_10(Simd128<int32> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_11:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movslq %edi, %rax
// CHECK-SSE42-NEXT:    movq %rax, %xmm1
// CHECK-SSE42-NEXT:    movdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm0
// CHECK-SSE42-NEXT:    psubq %xmm2, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_11:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    movslq %edi, %rax
// CHECK-AVX2-NEXT:    vmovq %rax, %xmm1
// CHECK-AVX2-NEXT:    vmovdqa {{.*#+}} xmm2 = [9223372036854775808,9223372036854775808]
// CHECK-AVX2-NEXT:    vpsrlq %xmm1, %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpsrlq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpxor %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsubq %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<int64> operatorSHR_11(Simd128<int64> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_12:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movdqa %xmm0, %xmm1
// CHECK-SSE42-NEXT:    movd %edi, %xmm0
// CHECK-SSE42-NEXT:    pxor %xmm2, %xmm2
// CHECK-SSE42-NEXT:    pshufb %xmm2, %xmm0
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlw $4, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    psllw $5, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlw $2, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm2
// CHECK-SSE42-NEXT:    psrlw $1, %xmm2
// CHECK-SSE42-NEXT:    pand {{.*}}(%rip), %xmm2
// CHECK-SSE42-NEXT:    paddb %xmm0, %xmm0
// CHECK-SSE42-NEXT:    pblendvb %xmm0, %xmm2, %xmm1
// CHECK-SSE42-NEXT:    movdqa %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_12:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpbroadcastb %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsllw $5, %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpsrlw $4, %xmm0, %xmm2
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm2, %xmm2
// CHECK-AVX2-NEXT:    vpaddb %xmm1, %xmm1, %xmm3
// CHECK-AVX2-NEXT:    vpblendvb %xmm1, %xmm2, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $2, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpblendvb %xmm3, %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    vpsrlw $1, %xmm0, %xmm1
// CHECK-AVX2-NEXT:    vpand {{.*}}(%rip), %xmm1, %xmm1
// CHECK-AVX2-NEXT:    vpaddb %xmm3, %xmm3, %xmm2
// CHECK-AVX2-NEXT:    vpblendvb %xmm2, %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint8> operatorSHR_12(Simd128<uint8> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_13:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    pmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-SSE42-NEXT:    psrlw %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_13:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpmovzxwq {{.*#+}} xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero
// CHECK-AVX2-NEXT:    vpsrlw %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint16> operatorSHR_13(Simd128<uint16> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_14:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movd %edi, %xmm1
// CHECK-SSE42-NEXT:    psrld %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_14:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    vmovd %edi, %xmm1
// CHECK-AVX2-NEXT:    vpsrld %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint32> operatorSHR_14(Simd128<uint32> a, int b) {
  return operator>>(a, b);
}

// CHECK-SSE42-LABEL: operatorSHR_15:
// CHECK-SSE42:       # %bb.0: # %entry
// CHECK-SSE42-NEXT:    movslq %edi, %rax
// CHECK-SSE42-NEXT:    movq %rax, %xmm1
// CHECK-SSE42-NEXT:    psrlq %xmm1, %xmm0
// CHECK-SSE42-NEXT:    retq
//
// CHECK-AVX2-LABEL: operatorSHR_15:
// CHECK-AVX2:       # %bb.0: # %entry
// CHECK-AVX2-NEXT:    movslq %edi, %rax
// CHECK-AVX2-NEXT:    vmovq %rax, %xmm1
// CHECK-AVX2-NEXT:    vpsrlq %xmm1, %xmm0, %xmm0
// CHECK-AVX2-NEXT:    retq
Simd128<uint64> operatorSHR_15(Simd128<uint64> a, int b) {
  return operator>>(a, b);
}

}
